/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clustalUDC.vistas;

import java.util.ArrayList;
import java.util.List;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import org.apache.poi.xssf.usermodel.XSSFCell;
import clustalUDC.persistencia.JTableCustom;

/**
 *
 * @author Home
 */
public class RegistroBD extends javax.swing.JFrame {

    /**
     * Creates new form RegistroBD
     */
    private ArrayList<ArrayList<Boolean>> filterConfigArray;
    private ArrayList<ArrayList<String>> filterConfigArrayString;

   // here my main gui has a reference to the JDialog and to the
   // MyDialogPanel which is displayed in the JDialog
    
    public RegistroBD(List cellData) {
        initComponents();
        imprimirBD(cellData);
        jMenuBar1.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setTitle("ClustalUDC (Comparacion de resultados)");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Mutation pos", "Exon", "Codon", "WT Codon", "Mutant Codon", "WT AA", "Mutant AA", "Origin", "Cancer", "Authors"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setName("Resultado base de datos"); // NOI18N
        jScrollPane1.setViewportView(jTable1);

        jMenu1.setText("Configurar filtro");

        jMenu3.setText("Filtrar por");

        jMenuItem2.setText("Mutation");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenu1.add(jMenu3);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 701, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        ArrayList<ArrayList<Boolean>> fa = new ArrayList<>();
        ArrayList<ArrayList<String>> fb = new ArrayList<>();
        ArrayList<Boolean> a = new ArrayList<>();
        a.add(true);
        a.add(true);
        a.add(true);
        a.add(true);
        a.add(true);
        fa.add(a);
        ArrayList<String> b = new ArrayList<>();
        b.add("1");
        b.add("2");
        b.add("3");
        b.add("4");
        b.add("5");
        fb.add(b);
        ArrayList<Boolean> aa = new ArrayList<>();
        aa.add(false);
        aa.add(true);
        aa.add(true);
        aa.add(false);
        aa.add(true);
        fa.add(aa);
        ArrayList<String> ab = new ArrayList<>();
        ab.add("AAA");
        ab.add("AAC");
        ab.add("AAG");
        ab.add("AAT");
        ab.add("ACA");
        fb.add(ab);
        this.filterConfigArray=fa;
        this.filterConfigArrayString=fb;
        filtrarPor(1);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistroBD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistroBD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistroBD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistroBD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        
    }

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    
    private void filtrarPor(int columna) {
        FilterConfig conf = new FilterConfig(columna, this.filterConfigArray, this.filterConfigArrayString);
        System.out.println(conf.getFilterConfigArray().get(columna).toString());
            //conf.setVisible(true);
        
    }
    
  

    private void imprimirBD(List cellData) {
        String []Datos = new String [11]; 
        JTableCustom modelo = new JTableCustom();
        modelo.addColumn("No.");
        modelo.addColumn("Mutation Position");
        modelo.addColumn("Exon");
        modelo.addColumn("Codon");
        modelo.addColumn("WT Codon");
        modelo.addColumn("Mutant Codon");
        modelo.addColumn("WT AA");
        modelo.addColumn("Mutant AA");
        modelo.addColumn("Origin");
        modelo.addColumn("Cancer");
        modelo.addColumn("Authors");
        for (int i = 0; i < cellData.size(); i++) {
            Datos[0]=i+1+"";
            int cont=1;
            List cellTempList = (List) cellData.get(i);
            for (int j = 0; j < cellTempList.size(); j++) {
                //cuales columnas imprimir
                if ((j>=1 && j<=7) || (j>=11 && j<=13)){
                    XSSFCell hssfCell = (XSSFCell) cellTempList.get(j);
                    String stringCellValue = hssfCell.toString();
                    Datos[cont]=stringCellValue;
                    //System.out.print(Datos[cont]+" ");
                    cont++;
                }
            }
            
            modelo.addRow(Datos);
        }
        jTable1.setModel(modelo);
        TableRowSorter<JTableCustom> sorter = new TableRowSorter<JTableCustom>(modelo);
        jTable1.setRowSorter(sorter);
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(15);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(15);
        jTable1.getColumnModel().getColumn(2).setPreferredWidth(15);
        jTable1.getColumnModel().getColumn(3).setPreferredWidth(15);
        jTable1.getColumnModel().getColumn(4).setPreferredWidth(15);
        jTable1.getColumnModel().getColumn(5).setPreferredWidth(15);
        jTable1.getColumnModel().getColumn(6).setPreferredWidth(15);
        jTable1.getColumnModel().getColumn(7).setPreferredWidth(15);
        jTable1.getColumnModel().getColumn(8).setPreferredWidth(25);
        
        
        
    }

    public void setjTable1(JTable jTable1) {
        this.jTable1 = jTable1;
    }

    public JTable getjTable1() {
        return jTable1;
    }

    public void setFilterConfigArray(ArrayList<ArrayList<Boolean>> filterConfigArray) {
        this.filterConfigArray = filterConfigArray;
    }

}